name: Unity Build and Release for Windows & Linux

on:
  push:
    branches:
      - main
    tags:
      - '*'
    paths-ignore:
      - '**/*.md'
  pull_request:

env:
  UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  UNITY_VERSION: auto
  PROJECT_PATH: ./3DGameConsoleMuseum
  BUILD_NAME: 3DGameConsoleMuseum
  
jobs:
  run-tests: # Runs tests if possible (This should also preload the library)
    name: Run Tests (${{ matrix.testMode }})
    runs-on: ubuntu-latest
    outputs:
      latest_commit: ${{ steps.get_commit.outputs.latest_commit }}
    strategy:
      matrix:
        testMode:
          - PlayMode
          - EditMode
    steps:
      # Free up space
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc
          sudo apt-get clean

      # Checkout
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      # Get latest commit hash
      - name: Get latest commit hash for game files
        id: get_commit
        run: |
          echo "latest_commit=$(git log -n 1 --pretty=format:%h -- ${{ env.PROJECT_PATH }})" >> $GITHUB_OUTPUT

      # Cache Unity Library
      - name: Cache Unity Library folder
        uses: actions/cache@v3
        with:
          path: ${{ env.PROJECT_PATH }}/Library  # Cache Unity Library folder
          key: ${{ runner.os }}-unity-${{ steps.get_commit.outputs.latest_commit }}
          restore-keys: |
            ${{ runner.os }}-unity

      # Run Unity tests
      - name: Test Unity project
        id: tests
        uses: game-ci/unity-test-runner@v4.3.1
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
          projectPath: ${{ env.PROJECT_PATH }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          testMode: ${{ matrix.testMode }}
          checkName: ${{ matrix.testMode }} Test Results

      # Upload test results
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.testMode }} Test Results
          path: ${{ steps.tests.outputs.artifactsPath }}

  build-game:
    name: Build Game (${{ matrix.name }})
    runs-on: ubuntu-latest
    needs: run-tests
    strategy:
      matrix:
        include:
          - name: Linux
            targetPlatform: StandaloneLinux64
            zipPostfix: -linux64.zip
            artifactName: linux-build

          - name: Windows
            targetPlatform: StandaloneWindows64
            zipPostfix: -windows64.zip
            artifactName: windows-build
    steps:
      # Free up space
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc
          sudo apt-get clean
          df -h  # Show available space after cleanup

      # Checkout
      - name: Checkout code
        uses: actions/checkout@v3

      # Cache Unity Library
      - name: Cache Unity Library folder
        uses: actions/cache@v3
        with:
          path: ${{ env.PROJECT_PATH }}/Library  # Cache Unity Library folder
          key: ${{ runner.os }}-unity-${{ needs.run-tests.outputs.latest_commit }}

      # Build the game project
      - name: Create ${{ matrix.name }} Build
        id: build
        uses: game-ci/unity-builder@v4.3.0
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: ${{ matrix.targetPlatform }}
          projectPath: ${{ env.PROJECT_PATH }}
          buildName: ${{ env.BUILD_NAME }}
          buildsPath: .

      # Archive the Build
      - name: Archive ${{ matrix.name }} Build
        run: |
          sudo zip -r ${{ env.BUILD_NAME }}${{ matrix.zipPostfix }} ${{ matrix.targetPlatform }}

      # Upload build artifact
      - name: Upload ${{ matrix.name }} build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifactName }}
          path: ${{ matrix.zipPostfix }}
          retention-days: 30



  release-game: # Release the game if a tag is pushed
    name: Release Game
    needs: build-game
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      # Fetch Linux build artifact
      - name: Download Linux build artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: ./

      # Fetch Windows build artifact
      - name: Download Windows build artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: ./

      # Create release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: "Executables for Windows and Linux can be found below. :)"
          draft: true
          prerelease: false
          files: |
            ${{ env.BUILD_NAME }}-linux64.zip
            ${{ env.BUILD_NAME }}-windows64.zip
